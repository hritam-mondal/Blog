@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<header>
    <nav class="navbar navbar-expand-lg">
        <div class="container">
            <a class="navbar-brand" href="index.html"><h2>Blog<em>.</em></h2></a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
                <i class="fas fa-bars" style="font-size: 1.5em; color: #fff"></i>
            </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item active">
                        <a class="nav-link" href="/">
                            Home
                            <span class="visually-hidden">(current)</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/blogs">Blogs</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About Us</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact Us</a>
                    </li>
                    @if (isLoggedIn)
                    {
                        <li class="button">
                            <a href="/create-post">Create Post</a>
                        </li>
                        <li>
                            <button class="button btn-logout" @onclick="HandleLogout">Logout</button>
                        </li>
                    }
                    else
                    {
                        <li class="button">
                            <a href="/login">Login</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>
</header>

@code {
    private bool isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if a valid token exists in local storage
        string token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            // Token exists, set isLoggedIn to true
            isLoggedIn = true;
        }
    }

    private async Task HandleLogout()
    {
        // Clear the token from local storage
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "token");

        // Set isLoggedIn to false
        isLoggedIn = false;
        NavigationManager.NavigateTo("/");
    }
}
