@page "/login"
@using System.ComponentModel.DataAnnotations
@layout AuthLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-4">
                <h2 class="mb-4 text-center">Login</h2>
                <p class="lead text-center mb-4">Please login into your account.</p>
                @if(errorMessage != null)
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                <div class="form-group">
                    <ValidationMessage For="@(() => loginModel.Email)" class="validation-message"></ValidationMessage>
                    <InputText @bind-Value="loginModel.Email" class="form-input" type="email" placeholder="Email"/>
                </div>

                <div class="form-group">
                    <ValidationMessage For="@(() => loginModel.Password)" class="validation-message"></ValidationMessage>
                    <InputText @bind-Value="loginModel.Password" id="password" class="form-input" type="password" placeholder="Password" />
                </div>

                <button type="submit" class="button float-end">Login</button>

                <div class="mt-3">
                    <p>Don't have an account? <a href="/register">Register</a></p>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7145/api/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var loginResult = await response.Content.ReadFromJsonAsync<LoginResult>();

                // Check the login result
                if (loginResult != null && loginResult.Success)
                {
                    // Login successful
                    Console.WriteLine("Login successful");

                    // Store the token in local storage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", loginResult.Token);

                    // Redirect to the desired page upon successful login (e.g., home page)
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    // Login failed, handle errors
                    errorMessage = loginResult?.ErrorMessage ?? "Login failed.";
                    Console.WriteLine(errorMessage);
                }
            }
            else
            {
                // Login failed, handle errors
                errorMessage = $"Login failed. Status code: {response.StatusCode}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            // Handle exception (e.g., network error)
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string? Email { get; set; }
        [Required(ErrorMessage = "Password is required.")]
        public string? Password { get; set; }
    }

    private class LoginResult
    {
        public bool Success { get; set; }
        public string? Token { get; set; }
        public string? ErrorMessage { get; set; }
    }
}