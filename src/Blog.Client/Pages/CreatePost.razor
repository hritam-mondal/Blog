@page "/create-post"
@using System.Net.Http.Headers
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager

<!-- Banner Starts Here -->
<div class="heading-page header-text">
    <section class="page-heading">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="text-content">
                        <h4>Create Post</h4>
                        <h2>Create a new post</h2>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<!-- Banner Ends Here -->

<div class="container mt-5">
    <EditForm Model="@postModel" OnValidSubmit="HandleCreatePost">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <h2 class="text-center mb-4">Create a New Post</h2>

                <div class="form-group">
                    <label for="Title">Title:</label>
                    <InputText @bind-Value="postModel.Title" class="form-control" id="Title" />
                    <ValidationMessage For="@(() => postModel.Title)" />
                </div>

                <div class="form-group">
                    <label for="Content">Content:</label>
                    <textarea @bind="postModel.Content" class="form-control" id="Content"></textarea>
                    <ValidationMessage For="@(() => postModel.Content)" />
                </div>

                <button type="submit" class="btn btn-primary float-end">Create Post</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private PostModel postModel = new PostModel();
    private string? errorMessage;

    private async Task HandleCreatePost()
    {
        try
        {
            string token = await GetToken();

            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Authorization token not found.";
                Console.WriteLine(errorMessage);
                return;
            }

            // Add the token to the request headers
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PostAsJsonAsync("https://localhost:7145/api/post", postModel);

            if (response.IsSuccessStatusCode)
            {
                var createPostResult = await response.Content.ReadFromJsonAsync<CreatePostResult>();

                if (createPostResult != null && createPostResult.Success)
                {
                    // Post creation successful
                    Console.WriteLine("Post created successfully");

                    // Navigate to the home page or view the newly created post
                    NavigationManager.NavigateTo("/");
                }
            }
            else
            {
                // Post creation failed, handle errors
                errorMessage = $"Post creation failed. Status code: {response.StatusCode}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            // Handle exception (e.g., network error)
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task<string> GetToken()
    {
        // Retrieve the JWT token from local storage
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
    }

    private class PostModel
    {
        public string? Title { get; set; }
        public string? Content { get; set; }
    }

    private class CreatePostResult
    {
        public bool Success { get; set; }
        public string? ErrorCode { get; set; }
        public Post? CreatedPost { get; set; }
    }

    public class Post
    {
        public Guid Id { get; set; }
        public string? Title { get; set; }
        public string? ImageUrl { get; set; }
        public string? Content { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public string? Author { get; set; }
        public List<string>? Tags { get; set; }
        public int Views { get; set; }
    }
}
